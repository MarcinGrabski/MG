<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAAMgAAADIAAAAAAAAAAAA
        AAAdICUaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIa
        HSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIaHSIXGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh80NzuNj5Eb
        HiMXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh82OT2sra7s7e0pLDAXGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8jJSqF
        h4l8foEdICUXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHCBrbXGPkZMtMDUXGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHV4ZH3I6
        PEGZmpxKTFAgIygXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHV8cJdgbIrJucHSSk5W3uLm8vb4XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8Z
        HVUcJdEaIZUbIrJucHSFhol/gIOKi46foKJzdHcXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8YHE0cJdAZHmEZHV8bIrJucHRVV1tXWV1kZmpd
        X2JNUFQXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8YHEUcJc4ZHmsXGh8ZHmAbIrJucHSHiYuTlZecnZ8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8YGzEZHVccJMoZH3YXGh8XGh8ZHV8bI74k
        JzaFh4p3eXwcHyQXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8X
        Gh8XGh8XGh8YGzIcJM4cJdoaIZ8XGh8XGh8XGh8ZHV8cJdkcJMkZHms5O0OVlphZW18XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8YHEgcJdocJdoaIZgXGh8X
        Gh8XGh8ZHV8bIrMZHVwbI8AbI7oZHVVYWl6WmJo/QUZBREgXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8aHSIXGh8XGh8XGh8XGh8XGh8XGiAaH3saIZoYGzkXGh8XGh8XGh8ZHV8bIrIXGh8XGiQZH3IcJM0b
        IqccIEWen6H+/v4uMDUXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8ZHV8bIrIXGh8XGh8XGh8YGy8aII0cJdMkKpZXWW0XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHV8bIrIX
        Gh8XGh8XGh8XGh8XGh8YGz4bIaMcJM4ZH3YXGiMXGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHV8bIrIXGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHmgc
        JdoYGzkXGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8ZHV8bIrIXGh8XGh8XGh8XGh8XGh8XGh8YGzUcI8EaIY4XGiEXGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHV8bIrIXGh8XGh8XGh8XGh8X
        Gh8YGzUbJMEaIY8XGiEXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8ZHV8bIrIXGh8XGh8XGh8XGh8YGzQbI8AaIJAXGiAXGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHV8bIrIX
        Gh8XGh8XGh8YGzQbI78aIZEXGiEXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHV8bIrIXGh8XGh8YGzMbI78bIZIXGiEXGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8ZHV8bIrIXGh8YGzMbI74aIZMXGiEXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHV8bIrIXGzIbI74aIZQXGiEX
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8ZHV8bI78bI70aIZUXGiEXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8ZHVgcJdoa
        IZYXGiEXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8YHEEXGiEXGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8aHSIXGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8XGh8X
        Gh8XGh8XGh8XGh8XGh8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>